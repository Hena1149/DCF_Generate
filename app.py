import streamlit as st
import fitz  # PyMuPDF
from docx import Document as DocxDocument
from docx import Document
from openai import AzureOpenAI
import io
import time

# Configuration de la page
st.set_page_config(
    page_title="G√©n√©rateur de DCF",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© qui respecte les couleurs du config.toml
st.markdown("""
<style>
    :root {
        --primary-color: #4CAF50;
        --secondary-color: #e3f2fd;
        --background-color: #f8f9fa;
        --text-color: #2c3e50;
        --accent-color: #2196F3;
        --border-color: #ced4da;
    }
    
    .stApp {
        background-color: var(--background-color);
        color: var(--text-color);
        font-family: 'sans serif';
    }
    
    .stTextInput>div>div>input, 
    .stTextArea>div>div>textarea,
    .stSelectbox>div>div>select {
        background-color: white !important;
        color: var(--text-color) !important;
        border: 1px solid var(--border-color) !important;
        border-radius: 6px !important;
        padding: 8px 12px !important;
    }
    
    .stTextInput>div>div>input:focus, 
    .stTextArea>div>div>textarea:focus {
        border-color: var(--primary-color) !important;
        box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2) !important;
    }
    
    .stButton>button {
        background-color: var(--primary-color) !important;
        color: white !important;
        border: none !important;
        border-radius: 6px !important;
        padding: 10px 24px !important;
        font-weight: 500 !important;
        transition: all 0.3s ease !important;
    }
    
    .stButton>button:hover {
        background-color: #3e8e41 !important;
        transform: translateY(-1px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .stFileUploader>div>div>button {
        background-color: var(--primary-color) !important;
        color: white !important;
        border-radius: 6px !important;
    }
    
    .sidebar .sidebar-content {
        background-color: var(--secondary-color) !important;
        border-right: 1px solid var(--border-color);
    }
    
    h1, h2, h3, h4, h5, h6 {
        color: var(--text-color) !important;
    }
    
    .stProgress>div>div>div>div {
        background-color: var(--primary-color) !important;
    }
    
    .stAlert {
        background-color: var(--secondary-color) !important;
        border-left: 4px solid var(--primary-color);
    }
    
    .stMarkdown {
        color: var(--text-color) !important;
    }
    
    .download-btn {
        background-color: var(--accent-color) !important;
        margin-top: 10px !important;
    }
    
    .download-btn:hover {
        background-color: #0d8bf2 !important;
    }
    
    .header-container {
        background: linear-gradient(135deg, var(--primary-color) 0%, #3e8e41 100%);
        padding: 2rem;
        border-radius: 0 0 10px 10px;
        margin-bottom: 2rem;
    }
    
    .header-title {
        color: white !important;
        margin: 0;
    }
    
    .header-subtitle {
        color: rgba(255,255,255,0.9) !important;
        margin: 0.5rem 0 0;
    }
    
    .info-box {
        background-color: var(--secondary-color);
        border-left: 4px solid var(--accent-color);
        padding: 1rem;
        border-radius: 6px;
        margin-bottom: 1rem;
    }
    
    .success-box {
        background-color: rgba(76, 175, 80, 0.1);
        border-left: 4px solid var(--primary-color);
        padding: 1rem;
        border-radius: 6px;
        margin-bottom: 1rem;
    }
    
    .error-box {
        background-color: rgba(244, 67, 54, 0.1);
        border-left: 4px solid #f44336;
        padding: 1rem;
        border-radius: 6px;
        margin-bottom: 1rem;
    }
    
    .stExpander {
        border: 1px solid var(--border-color) !important;
        border-radius: 6px !important;
    }
    
    .stExpander .stExpanderHeader {
        background-color: var(--secondary-color) !important;
    }
    
    [data-testid="stHeader"] {
        background-color: rgba(255,255,255,0) !important;
    }
    
    [data-testid="stToolbar"] {
        display: none !important;
    }
</style>
""", unsafe_allow_html=True)

def read_file(uploaded_file):
    """Lit le contenu d'un fichier upload√© (PDF, TXT ou DOCX)"""
    try:
        if uploaded_file.type == "application/pdf":
            text = ""
            with fitz.open(stream=uploaded_file.read(), filetype="pdf") as doc:
                for page in doc:
                    text += page.get_text()
            return text
        
        elif uploaded_file.type == "text/plain":
            return uploaded_file.read().decode("utf-8")
        
        elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            doc = DocxDocument(io.BytesIO(uploaded_file.read()))
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            return text
        
        else:
            st.error("Format non support√©. Utilisez un fichier .pdf, .txt ou .docx.")
            return None
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier: {str(e)}")
        return None

# def generate_prompt(cdc_text):
#     """G√©n√®re le prompt pour GPT √† partir du texte du CDC"""
#     return f"""
# Tu es un assistant expert en conception fonctionnelle de syst√®mes d'information, et tu dois r√©diger un Dossier de Conception Fonctionnelle (DCF) √† partir d'un cahier des charges (CDC) fourni ci-dessous.

# Le DCF que tu vas r√©diger doit **respecter rigoureusement la structure suivante**, issue du guide d'√©laboration DDI M IT 02.02 :

# ---

# ### 1. CADRE GENERAL
# 1.1. Pr√©sentation g√©n√©rale du syst√®me (objectifs, fonctions globales)
# 1.2. R√©f√©rences (documents applicables et r√©f√©rences)
# 1.3. Environnement (positionnement dans le SI, environnement technique)
# 1.4. Terminologie et sigles utilis√©s

# ### 2. ARCHITECTURE FONCTIONNELLE
# 2.1. Modules fonctionnels (d√©coupage, description des modules)
# 2.2. Synoptique fonctionnel (flux entre fonctions)

# ### 3. SPECIFICATIONS FONCTIONNELLES
# Pour chaque module identifi√© :
# - Nom du module
# - Pour chaque fonction :
#   - D√©finition (objectif de la fonction)
#   - Identification (code, acteur, d√©clencheur, cons√©quences IHM et traitement)
#   - Description du processus :
#     - Entr√©es
#     - Traitement
#     - Sorties
#     - R√®gles de gestion (Pas d'Abr√©viation √©crit la r√®gle de gestion)

# ### 4. REPRISE DE L'EXISTANT
# 4.1. Proc√©dure de reprise
# 4.2. Contraintes de reprise

# ### 5. RECAPITULATIF DES REGLES DE GESTION
# Tableau r√©capitulatif avec fonction associ√©e √† chaque r√®gle.

# ### 6. VISA DE VALIDATION
# Pr√©sentation des aspects valid√©s et les parties prenantes concern√©es.

# ---

# Tu dois **extraire, analyser et structurer le contenu du CDC suivant** pour produire automatiquement un DCF de qualit√© conforme √† cette structure, en tenant compte :
# - des besoins exprim√©s,
# - des r√®gles de gestion m√©tier,
# - des exigences fonctionnelles,
# - des contraintes techniques,
# - des modules √©voqu√©s.

# Voici le contenu du CDC :

# \"\"\"{cdc_text[:15000]}\"\"\"

# R√©dige maintenant un DCF complet et bien format√© √† partir de ce CDC.
# """

def generate_prompt(cdc_text):
    """G√©n√®re le prompt pour GPT √† partir du texte du CDC"""
    return f"""
Tu es un assistant expert en conception fonctionnelle de syst√®mes d'information, et tu dois r√©diger un Dossier de Conception Fonctionnelle (DCF) d√©taill√© et complet √† partir d'un cahier des charges (CDC) fourni ci-dessous.

Le DCF que tu vas r√©diger doit **respecter rigoureusement la structure suivante**, issue du guide d'√©laboration DDI M IT 02.02, en fournissant des informations pr√©cises et exhaustives pour chaque section :

---

### 1. CADRE GENERAL
1.1. Pr√©sentation g√©n√©rale du syst√®me
   - Objectifs strat√©giques et op√©rationnels
   - P√©rim√®tre fonctionnel pr√©cis
   - Finalit√© du syst√®me
   - B√©n√©fices attendus
   - Publics cibles

1.2. R√©f√©rences
   - Documents normatifs (liste compl√®te)
   - Standards applicables
   - Contraintes r√©glementaires
   - R√©f√©rences aux documents projets

1.3. Environnement
   - Architecture technique d√©taill√©e
   - Syst√®mes connect√©s (interfaces)
   - Contraintes d'int√©gration
   - Pr√©requis mat√©riels/logiciels
   - Environnement de d√©ploiement

1.4. Terminologie et sigles
   - Glossaire complet avec d√©finitions
   - Liste des acronymes avec explications
   - Termes techniques sp√©cifiques

### 2. ARCHITECTURE FONCTIONNELLE
2.1. Modules fonctionnels
   - D√©coupage modulaire d√©taill√©
   - Responsabilit√©s de chaque module
   - Interactions entre modules
   - Sp√©cificit√©s techniques

2.2. Synoptique fonctionnel
   - Diagramme textuel des flux
   - S√©quencement des op√©rations
   - Points d'int√©gration critiques
   - Flux principaux et secondaires

### 3. SPECIFICATIONS FONCTIONNELLES (√Ä D√âTAILLER POUR CHAQUE MODULE)
Pour chaque module identifi√© :
- Nom du module et version
- Description approfondie :
  * Finalit√© et port√©e
  * Contraintes sp√©cifiques
  * Hypoth√®ses techniques

Pour chaque fonction :
  - D√©finition compl√®te :
    * Objectif m√©tier
    * Valeur ajout√©e
    * Crit√®res de succ√®s

  - Identification pr√©cise :
    * Code unique (norme de nommage)
    * Acteurs concern√©s (r√¥les)
    * D√©clencheurs (√©v√©nements)
    * Pr√©conditions et postconditions
    * Impacts IHM d√©taill√©s

  - Description du processus :
    * Entr√©es : format, source, validation
    * Traitement : algorithme, logique m√©tier
    * Sorties : format, destination, qualit√©
    * R√®gles de gestion : formulation compl√®te sans abr√©viation
    * Cas d'erreur et gestion des exceptions
    * Contr√¥les de qualit√©

### 4. REPRISE DE L'EXISTANT
4.1. Proc√©dure de reprise
   - Strat√©gie de migration
   - Plan de conversion
   - Nettoyage des donn√©es
   - Validation post-migration

4.2. Contraintes de reprise
   - Compatibilit√©s
   - Anomalies connues
   - Limitations techniques
   - P√©rim√®tre exclu

### 5. RECAPITULATIF DES REGLES DE GESTION
Tableau structur√© contenant :
- Identifiant unique de la r√®gle
- Libell√© complet et non ambigu
- Module/fonction associ√©e
- Source m√©tier
- Crit√®re d'application
- Exemples concrets
- Exceptions √©ventuelles

### 6. VISA DE VALIDATION
- Liste des validations requises
- Responsables par domaine
- Crit√®res d'acceptation
- Preuves de validation
- Planning de recette

---

**Directives sp√©cifiques :**
1. Analyse minutieusement le CDC pour extraire toutes les exigences implicites et explicites
2. Structure le contenu de mani√®re logique et progressive
3. Utilise un langage technique pr√©cis mais accessible
4. Fournis des exemples concrets quand n√©cessaire
5. Identifie clairement les d√©pendances entre composants
6. Mentionne les contraintes et limitations de mani√®re transparente
7. Propose des recommandations pour les aspects critiques

**Approche r√©dactionnelle :**
- Style professionnel et normatif
- Phrases compl√®tes et structur√©es
- Terminologie coh√©rente
- Num√©rotation pr√©cise des √©l√©ments
- Mise en forme claire avec des paragraphes a√©r√©s

Voici le contenu du CDC √† analyser :

\"\"\"{cdc_text[:30000]}\"\"\"

G√©n√®re maintenant un DCF exhaustif, en d√©veloppant particuli√®rement :
- Les r√®gles de gestion avec leur logique compl√®te
- Les sc√©narios d'utilisation typiques
- Les cas limites √† prendre en compte
- Les interfaces syst√®me d√©taill√©es
- Les contraintes de performance
"""

def call_gpt(prompt, api_key, endpoint, deployment):
    """Appelle l'API Azure OpenAI pour g√©n√©rer le DCF"""
    try:
        client = AzureOpenAI(
            api_key=api_key,
            api_version="2024-02-15-preview",
            azure_endpoint=endpoint
        )

        response = client.chat.completions.create(
            model=deployment,
            messages=[
                {"role": "system", "content": "Tu es un expert en conception de syst√®mes logiciels."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Erreur lors de l'appel √† l'API OpenAI: {str(e)}")
        return None

def save_dcf_to_word(text, filename="DCF_G√©n√©r√©.docx"):
    """Sauvegarde le DCF dans un fichier Word"""
    doc = Document()
    for line in text.split('\n'):
        if line.strip() == "":
            continue
        if line.strip().startswith('#') or line.strip().startswith("1.") or line.strip().startswith("2.") or line.strip().startswith("3."):
            doc.add_heading(line.strip(), level=1)
        else:
            doc.add_paragraph(line.strip())
    
    # Sauvegarde en m√©moire
    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

def save_dcf_to_txt(text, filename="DCF_G√©n√©r√©.txt"):
    """Sauvegarde le DCF dans un fichier texte"""
    buffer = io.BytesIO()
    buffer.write(text.encode('utf-8'))
    buffer.seek(0)
    return buffer

def main():
    """Fonction principale de l'application Streamlit."""
    # Header avec d√©grad√© de couleur
    st.markdown("""
    <div class="header-container">
        <h1 class="header-title">G√©n√©rateur de Dossier de Conception Fonctionnelle (DCF)</h1>
        <p class="header-subtitle">Transformez votre cahier des charges en un DCF professionnel en quelques clics</p>
    </div>
    """, unsafe_allow_html=True)
    
    with st.expander("Instructions d'utilisation", expanded=True):
        st.markdown("""
        <div class="info-box">
            <h4 style="margin-top: 0;">Comment utiliser cette application :</h4>
            <ol>
                <li><strong>Configurez votre API Azure OpenAI</strong> dans la barre lat√©rale</li>
                <li><strong>T√©l√©versez votre cahier des charges</strong> (PDF, TXT ou DOCX)</li>
                <li><strong>G√©n√©rez le DCF</strong> en cliquant sur le bouton</li>
                <li><strong>T√©l√©chargez le r√©sultat</strong> au format Word ou texte</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)
    
    with st.sidebar:
        st.markdown("""
        <div style="border-bottom: 2px solid var(--primary-color); padding-bottom: 10px; margin-bottom: 20px;">
            <h2 style="color: var(--text-color); margin: 0;">‚öôÔ∏è Configuration</h2>
        </div>
        """, unsafe_allow_html=True)
        
        st.subheader("API Azure OpenAI")
        api_key = st.text_input("Cl√© API", type="password", help="La cl√© API pour acc√©der au service Azure OpenAI")
        endpoint = st.text_input("Endpoint", value="https://chat-genai.openai.azure.com/", help="L'URL du endpoint Azure OpenAI")
        deployment = st.text_input("Mod√®le", value="gpt-4o", help="Le nom du mod√®le d√©ploy√© dans Azure OpenAI")
        
        st.markdown("---")
        
        st.subheader("Options")
        show_prompt = st.checkbox("Afficher le prompt envoy√© √† l'API", value=False)
        show_raw_output = st.checkbox("Afficher la sortie brute de l'API", value=False)
    
    # Zone de t√©l√©chargement du fichier avec style am√©lior√©
    st.subheader("T√©l√©versement du fichier")
    uploaded_file = st.file_uploader(
        " ",
        type=["pdf", "txt", "docx"],
        help="Format accept√©s: PDF, TXT ou DOCX",
        label_visibility="collapsed"
    )
    
    # Bouton de g√©n√©ration avec ic√¥ne
    generate_button = st.button("G√©n√©rer le DCF", type="primary", use_container_width=True)
    
    if generate_button:
        if not uploaded_file:
            st.markdown("""
            <div class="error-box">
                <p style="margin: 0;">Veuillez t√©l√©verser un fichier CDC.</p>
            </div>
            """, unsafe_allow_html=True)
            return
        
        if not api_key or not endpoint or not deployment:
            st.markdown("""
            <div class="error-box">
                <p style="margin: 0;">Veuillez configurer les param√®tres Azure OpenAI dans la barre lat√©rale.</p>
            </div>
            """, unsafe_allow_html=True)
            return
        
        try:
            with st.spinner("Lecture du fichier en cours..."):
                cdc_text = read_file(uploaded_file)
                time.sleep(1)
            
            if not cdc_text.strip():
                st.markdown("""
                <div class="error-box">
                    <p style="margin: 0;">Le fichier semble vide ou n'a pas pu √™tre lu correctement.</p>
                </div>
                """, unsafe_allow_html=True)
                return
            
            with st.spinner("G√©n√©ration du prompt..."):
                prompt = generate_prompt(cdc_text)
                time.sleep(1)
                if show_prompt:
                    with st.expander(" Prompt envoy√© √† l'API"):
                        st.code(prompt)
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for percent in range(0, 101, 10):
                status_text.text(f" G√©n√©ration en cours... {percent}%")
                progress_bar.progress(percent)
                time.sleep(0.1)
            
            start_time = time.time()
            dcf_result = call_gpt(prompt, api_key, endpoint, deployment)
            elapsed_time = time.time() - start_time
            
            progress_bar.empty()
            status_text.empty()
            
            st.markdown(f"""
            <div class="success-box">
                <h4 style="margin-top: 0;"> DCF g√©n√©r√© avec succ√®s !</h4>
                <p>Temps de traitement : {elapsed_time:.2f} secondes</p>
            </div>
            """, unsafe_allow_html=True)
            
            if show_raw_output:
                with st.expander("Sortie brute de l'API"):
                    st.code(dcf_result)
            
            # Affichage du r√©sultat avec onglets
            tab1, tab2 = st.tabs(["Aper√ßu du DCF", " T√©l√©chargement"])
            
            with tab1:
                st.subheader("R√©sultat - Dossier de Conception Fonctionnelle")
                st.markdown(dcf_result)
            
            with tab2:
                st.subheader("Options de t√©l√©chargement")
                col1, col2 = st.columns(2)
                with col1:
                    word_buffer = save_dcf_to_word(dcf_result)
                    st.download_button(
                        label="T√©l√©charger en Word",
                        data=word_buffer,
                        file_name="DCF_G√©n√©r√©.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        use_container_width=True
                    )
                
                with col2:
                    txt_buffer = save_dcf_to_txt(dcf_result)
                    st.download_button(
                        label=" T√©l√©charger en TXT",
                        data=txt_buffer,
                        file_name="DCF_G√©n√©r√©.txt",
                        mime="text/plain",
                        use_container_width=True
                    )
            
        except Exception as e:
            st.markdown(f"""
            <div class="error-box">
                <h4 style="margin-top: 0;"> Une erreur est survenue</h4>
                <p>{str(e)}</p>
            </div>
            """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
